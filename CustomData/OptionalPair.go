// Code generated by 'go generate'

package CustomData

import (
	"encoding/json"
	"errors"
)

// OptionalPair is an optional pair.
type OptionalPair[A any, B any] struct {
	value *Pair[A, B]
}

func (op *OptionalPair[A, B]) Cleanup() {
	op.value.Cleanup()
	op.value = nil
}

// NewOptionalPair creates an optional.OptionalPair from a pair.
func NewOptionalPair[A any, B any](v Pair[A, B]) OptionalPair[A, B] {
	return OptionalPair[A, B]{&v}
}

// NewOptionalPairFromPtr creates an optional.OptionalPair from a pair pointer.
func NewOptionalPairFromPtr[A any, B any](v *Pair[A, B]) OptionalPair[A, B] {
	if v == nil {
		return OptionalPair[A, B]{}
	}
	return NewOptionalPair(*v)
}

// Set sets the pair value.
func (b *OptionalPair[A, B]) Set(v Pair[A, B]) {
	b.value = &v
}

// ToPtr returns a *pair of the value or nil if not present.
func (b OptionalPair[A, B]) ToPtr() *Pair[A, B] {
	if !b.Present() {
		return nil
	}
	v := *b.value
	return &v
}

// Get returns the pair value or an error if not present.
func (b OptionalPair[A, B]) Get() (Pair[A, B], error) {
	if !b.Present() {
		var zero Pair[A, B]
		return zero, errors.New("value not present")
	}
	return *b.value, nil
}

// MustGet returns the pair value or panics if not present.
func (b OptionalPair[A, B]) MustGet() Pair[A, B] {
	if !b.Present() {
		panic("value not present")
	}
	return *b.value
}

// Present returns whether or not the value is present.
func (b OptionalPair[A, B]) Present() bool {
	return b.value != nil
}

// OrElse returns the pair value or a default value if the value is not present.
func (b OptionalPair[A, B]) OrElse(v Pair[A, B]) Pair[A, B] {
	if b.Present() {
		return *b.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (b OptionalPair[A, B]) If(fn func(Pair[A, B])) {
	if b.Present() {
		fn(*b.value)
	}
}

func (b OptionalPair[A, B]) MarshalJSON() ([]byte, error) {
	if b.Present() {
		return json.Marshal(b.value)
	}
	return json.Marshal(nil)
}

func (b *OptionalPair[A, B]) UnmarshalJSON(data []byte) error {

	if string(data) == "null" {
		b.value = nil
		return nil
	}

	var value Pair[A, B]

	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	b.value = &value
	return nil
}
